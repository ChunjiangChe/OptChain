    Checking optchain v0.1.0 (/home/cc913/OptChain)
warning: unused import: `Info`
  --> src/manifoldchain/confirmation/mod.rs:11:13
   |
11 |             Info,
   |             ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Content`
  --> src/manifoldchain/confirmation/mod.rs:12:13
   |
12 |             Content,
   |             ^^^^^^^

warning: unused variable: `tx_hash`
   --> src/manifoldchain/api/mod.rs:352:17
    |
352 |             let tx_hash = &item.0.0;
    |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_hash`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ex_block`
   --> src/manifoldchain/block/versa_block.rs:179:33
    |
179 |             VersaBlock::ExBlock(ex_block) => None,
    |                                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ex_block`

warning: unused variable: `ex_full_block`
   --> src/manifoldchain/block/versa_block.rs:181:37
    |
181 |             VersaBlock::ExFullBlock(ex_full_block) => None,
    |                                     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ex_full_block`

warning: unused variable: `ex_blk`
   --> src/manifoldchain/blockchain/mod.rs:384:14
    |
384 |         let (ex_blk, tx_blk) = ExclusiveBlock::generate(
    |              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_ex_blk`

warning: unused variable: `tx_blk`
   --> src/manifoldchain/blockchain/mod.rs:384:22
    |
384 |         let (ex_blk, tx_blk) = ExclusiveBlock::generate(
    |                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_blk`

warning: unreachable pattern
    --> src/manifoldchain/blockchain/mod.rs:1124:21
     |
1124 |                     _ => None
     |                     ^ no value can reach this
     |
note: multiple earlier patterns match some of the same values
    --> src/manifoldchain/blockchain/mod.rs:1124:21
     |
1118 |                     VersaBlock::ExBlock(ex_block) => Some(ex_block.get_cons_block()),
     |                     ----------------------------- matches some of the same values
1119 |                     VersaBlock::InBlock(in_block) => Some(in_block.get_cons_block()),
     |                     ----------------------------- matches some of the same values
1120 |                     VersaBlock::ExFullBlock(ex_full_block) 
     |                     -------------------------------------- matches some of the same values
1121 |                         => Some(ex_full_block.ex_block.get_cons_block()),
1122 |                     VersaBlock::InFullBlock(in_full_block) 
     |                     -------------------------------------- matches some of the same values
1123 |                         => Some(in_full_block.in_block.get_cons_block()),
1124 |                     _ => None
     |                     ^ collectively making this unreachable
     = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `block`
    --> src/manifoldchain/blockchain/mod.rs:1237:25
     |
1237 |                     let block = self.get_block(&block_hash).unwrap();
     |                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_block`

warning: unused variable: `value`
    --> src/manifoldchain/blockchain/mod.rs:1219:53
     |
1219 |                 self.unverified_blocks.retain(|key, value| {
     |                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_value`

warning: unused variable: `fp`
   --> src/manifoldchain/miner/mod.rs:420:41
    |
420 | ...                   Err(fp) => {
    |                           ^^ help: if this is intentional, prefix it with an underscore: `_fp`

warning: unused variable: `i`
   --> src/manifoldchain/miner/mod.rs:491:29
    |
491 |                         for i in 0..self.config.block_size-counter {
    |                             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: value assigned to `final_block` is never read
   --> src/manifoldchain/miner/mod.rs:534:29
    |
534 |                     let mut final_block: VersaBlock = VersaBlock::default();
    |                             ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unreachable pattern
   --> src/manifoldchain/network/worker.rs:628:17
    |
628 |                 _ => unimplemented!()
    |                 ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> src/manifoldchain/network/worker.rs:628:17
    |
120 |                 Message::Ping(nonce) => {
    |                 -------------------- matches some of the same values
...
124 |                 Message::Pong(nonce) => {
    |                 -------------------- matches some of the same values
...
127 |                 Message::NewTransactionHash((tx_hashs, shard_id)) => {
    |                 ------------------------------------------------- matches some of the same values
...
134 |                 Message::GetTransactions((tx_hashs, shard_id)) => {
    |                 ---------------------------------------------- matches some of the same values
...
628 |                 _ => unimplemented!()
    |                 ^ ...and 23 other patterns collectively make this unreachable

warning: unused variable: `tx`
   --> src/manifoldchain/network/worker.rs:697:25
    |
697 |             if let Some(tx) = self.mempool.lock().unwrap().get_tx(&tx_hash) {
    |                         ^^ help: if this is intentional, prefix it with an underscore: `_tx`

warning: unused variable: `shard_id`
    --> src/manifoldchain/network/worker.rs:1141:45
     |
1141 | ...                   let shard_id = fp.get_shard_id();
     |                           ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `block_hash`
    --> src/manifoldchain/network/worker.rs:1142:45
     |
1142 | ...                   let block_hash = fp.get_invalid_block();
     |                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_block_hash`

warning: unused variable: `val`
    --> src/manifoldchain/network/worker.rs:1213:25
     |
1213 |             .map(|(key, val)| key)
     |                         ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `block_hash`
    --> src/manifoldchain/network/worker.rs:1405:21
     |
1405 |                 let block_hash = fp.get_invalid_block();
     |                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_block_hash`

warning: unused variable: `block_hash`
    --> src/manifoldchain/network/worker.rs:1424:17
     |
1424 |             let block_hash = sample.0.clone();
     |                 ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_block_hash`

warning: unused variable: `tx_index`
    --> src/manifoldchain/network/worker.rs:1425:17
     |
1425 |             let tx_index = sample.1 as usize;
     |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_index`

warning: unused variable: `tx_index`
    --> src/manifoldchain/network/worker.rs:1498:17
     |
1498 |             let tx_index = sample_key.1 as usize;
     |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_index`

warning: unused variable: `shard_id`
    --> src/manifoldchain/network/worker.rs:1499:17
     |
1499 |             let shard_id = sample_key.2 as usize;
     |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: variable `no_utxo_count` is assigned to, but never used
   --> src/manifoldchain/transaction/generator.rs:172:17
    |
172 |         let mut no_utxo_count = 0;
    |                 ^^^^^^^^^^^^^
    |
    = note: consider using `_no_utxo_count` instead

warning: unused variable: `i`
   --> src/manifoldchain/transaction/generator.rs:236:25
    |
236 |                     for i in 0..self.config.initial_utxo_num {
    |                         ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `num_node`
   --> src/manifoldchain/transaction/generator.rs:263:21
    |
263 |                 let num_node = self.users.len();
    |                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_num_node`

warning: value assigned to `no_utxo_count` is never read
   --> src/manifoldchain/transaction/generator.rs:346:21
    |
346 |                     no_utxo_count = 0;
    |                     ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `delete_used_utxo`
   --> src/manifoldchain/transaction/generator.rs:434:17
    |
434 |             let delete_used_utxo: HashMap<(H256, u32), bool> = self.used_utxo
    |                 ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_delete_used_utxo`

warning: unused variable: `i`
   --> src/manifoldchain/transaction/mod.rs:254:19
    |
254 |             .map(|i| UtxoInput::default())
    |                   ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `i`
   --> src/manifoldchain/transaction/mod.rs:258:19
    |
258 |             .map(|i| UtxoOutput::default())
    |                   ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `state`
   --> src/manifoldchain/validator/mod.rs:348:13
    |
348 |         let state = states
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `tx_hash`
   --> src/manifoldchain/validator/mod.rs:824:13
    |
824 |         let tx_hash = tx.hash();
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_hash`

warning: unused variable: `e`
   --> src/manifoldchain/validator/mod.rs:847:21
    |
847 |                 Err(e) => {
    |                     ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `tx`
   --> src/manifoldchain/validator/mod.rs:819:9
    |
819 |         tx: &Transaction,
    |         ^^ help: if this is intentional, prefix it with an underscore: `_tx`

warning: unused variable: `tmy`
   --> src/manifoldchain/validator/mod.rs:820:9
    |
820 |         tmy: &Testimony,
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_tmy`

warning: unused variable: `fraud_proof`
   --> src/manifoldchain/validator/mod.rs:956:38
    |
956 |     pub fn verify_fraud_proof(&self, fraud_proof: &FraudProof) -> bool {
    |                                      ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fraud_proof`

warning: unused variable: `invalid_block`
    --> src/manifoldchain/validator/mod.rs:1011:13
     |
1011 |         let invalid_block = match self.multichain
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_invalid_block`

warning: unused variable: `fp`
    --> src/manifoldchain/validator/mod.rs:1071:34
     |
1071 |     fn verify_utxolost_fp(&self, fp: &UtxoLostProof) -> bool {
     |                                  ^^ help: if this is intentional, prefix it with an underscore: `_fp`

warning: unused variable: `invalid_block`
    --> src/manifoldchain/validator/mod.rs:1110:13
     |
1110 |         let invalid_block = match self.multichain
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_invalid_block`

warning: unused variable: `fp`
    --> src/manifoldchain/validator/mod.rs:1169:33
     |
1169 |     fn verify_tmylost_fp(&self, fp: &TestimonyLostProof) -> bool {
     |                                 ^^ help: if this is intentional, prefix it with an underscore: `_fp`

warning: unused variable: `e`
    --> src/manifoldchain/validator/mod.rs:1216:25
     |
1216 |                     Err(e) => return true,
     |                         ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `sample_index`
    --> src/manifoldchain/validator/mod.rs:1247:34
     |
1247 |     pub fn verify_samples(&self, sample_index: &SampleIndex, samples: Vec<Sample>) -> bool {
     |                                  ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sample_index`

warning: unused variable: `samples`
    --> src/manifoldchain/validator/mod.rs:1247:62
     |
1247 |     pub fn verify_samples(&self, sample_index: &SampleIndex, samples: Vec<Sample>) -> bool {
     |                                                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_samples`

warning: unused variable: `val`
   --> src/manifoldchain/mempool/mod.rs:164:33
    |
164 |                     .map(|(key, val)| key.clone())
    |                                 ^^^ help: if this is intentional, prefix it with an underscore: `_val`

warning: unused variable: `shard_id`
   --> src/manifoldchain/mod.rs:254:9
    |
254 |     let shard_id = format!("{:x}", shard_id);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `validator`
  --> src/optchain/api/mod.rs:98:21
   |
98 |                 let validator = Validator::new(
   |                     ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validator`

warning: unused variable: `prop_block`
  --> src/optchain/block/versa_block.rs:59:35
   |
59 |             VersaBlock::PropBlock(prop_block) => None,
   |                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prop_block`

warning: unused variable: `avai_block`
  --> src/optchain/block/versa_block.rs:68:37
   |
68 |             VersaBlock::ExAvaiBlock(avai_block) => None,
   |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `avai_block`
  --> src/optchain/block/versa_block.rs:69:37
   |
69 |             VersaBlock::InAvaiBlock(avai_block) => None,
   |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `prop_block`
  --> src/optchain/block/versa_block.rs:75:35
   |
75 |             VersaBlock::PropBlock(prop_block) => None,
   |                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prop_block`

warning: unused variable: `prop_block`
  --> src/optchain/block/versa_block.rs:83:35
   |
83 |             VersaBlock::PropBlock(prop_block) => None,
   |                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prop_block`

warning: unused variable: `avai_block`
  --> src/optchain/block/versa_block.rs:84:37
   |
84 |             VersaBlock::ExAvaiBlock(avai_block) => None,
   |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `avai_block`
  --> src/optchain/block/versa_block.rs:92:37
   |
92 |             VersaBlock::ExAvaiBlock(avai_block) => None,
   |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `avai_block`
  --> src/optchain/block/versa_block.rs:93:37
   |
93 |             VersaBlock::InAvaiBlock(avai_block) => None,
   |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `prop_block`
  --> src/optchain/block/versa_block.rs:99:35
   |
99 |             VersaBlock::PropBlock(prop_block) => None,
   |                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prop_block`

warning: unused variable: `prop_block`
   --> src/optchain/block/versa_block.rs:107:35
    |
107 |             VersaBlock::PropBlock(prop_block) => None,
    |                                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prop_block`

warning: unused variable: `avai_block`
   --> src/optchain/block/versa_block.rs:108:37
    |
108 |             VersaBlock::ExAvaiBlock(avai_block) => None,
    |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `avai_block`
   --> src/optchain/block/versa_block.rs:109:37
    |
109 |             VersaBlock::InAvaiBlock(avai_block) => None,
    |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avai_block`

warning: unused variable: `shard_id`
  --> src/optchain/block/mod.rs:55:59
   |
55 | ...                   .map(|(hash, shard_id)| hash.clone())
   |                                    ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `verified_height`
   --> src/optchain/blockchain/mod.rs:282:13
    |
282 |         let verified_height = 0 as usize;
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_verified_height`

warning: unused variable: `shard_id`
   --> src/optchain/blockchain/mod.rs:320:37
    |
320 |                 .map(|(parent_hash, shard_id)| parent_hash.clone())
    |                                     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `blk_hash`
   --> src/optchain/blockchain/mod.rs:443:47
    |
443 |     pub fn get_tx_blk_in_longest_chain(&self, blk_hash: &H256) -> Option<TransactionBlock> {
    |                                               ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_blk_hash`

warning: value assigned to `txs` is never read
   --> src/optchain/miner/mod.rs:208:25
    |
208 |                 let mut txs: Vec<Transaction> = vec![];
    |                         ^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_prop_parent` is never read
   --> src/optchain/miner/mod.rs:250:21
    |
250 |                     pre_prop_parent = prop_parent;
    |                     ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_inter_parent` is never read
   --> src/optchain/miner/mod.rs:251:21
    |
251 |                     pre_inter_parent = inter_parent;
    |                     ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_global_parents` is never read
   --> src/optchain/miner/mod.rs:252:21
    |
252 |                     pre_global_parents = global_parents_hash;
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_prop_parent` is never read
   --> src/optchain/miner/mod.rs:309:21
    |
309 |                     pre_prop_parent = H256::default();
    |                     ^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_inter_parent` is never read
   --> src/optchain/miner/mod.rs:310:21
    |
310 |                     pre_inter_parent = H256::default();
    |                     ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_global_parents` is never read
   --> src/optchain/miner/mod.rs:311:21
    |
311 |                     pre_global_parents = H256::default();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `pre_hybrid_block` is never read
   --> src/optchain/miner/mod.rs:312:21
    |
312 |                     pre_hybrid_block = Block::default();
    |                     ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `index`
   --> src/optchain/miner/mod.rs:205:48
    |
205 | ...                   .map(|(hash, index)| hash.clone())
    |                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_index`

warning: unused variable: `i`
   --> src/optchain/miner/mod.rs:217:39
    |
217 | ...                   .map(|i| Transaction::gen_rand_tx())
    |                             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unreachable pattern
   --> src/optchain/network/worker.rs:201:17
    |
201 |                 _ => unimplemented!()
    |                 ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> src/optchain/network/worker.rs:201:17
    |
104 |                 Message::Ping(nonce) => {
    |                 -------------------- matches some of the same values
...
108 |                 Message::Pong(nonce) => {
    |                 -------------------- matches some of the same values
...
111 |                 Message::NewTxBlockHash(tx_blk_hashs) => {
    |                 ------------------------------------- matches some of the same values
...
118 |                 Message::GetTxBlocks(tx_blk_hashs) => {
    |                 ---------------------------------- matches some of the same values
...
201 |                 _ => unimplemented!()
    |                 ^ ...and 8 other patterns collectively make this unreachable

warning: unused variable: `tx_blk`
   --> src/optchain/network/worker.rs:258:25
    |
258 |             if let Some(tx_blk) = self.mempool.lock().unwrap().get_tx_blk(&hash) {
    |                         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_blk`

warning: unused variable: `s`
   --> src/optchain/network/worker.rs:513:25
    |
513 |                     Err(s) => {
    |                         ^ help: if this is intentional, prefix it with an underscore: `_s`

warning: unused variable: `y`
   --> src/optchain/network/worker.rs:529:28
    |
529 |                         Ok(y) => {
    |                            ^ help: if this is intentional, prefix it with an underscore: `_y`

warning: variable does not need to be mutable
   --> src/optchain/network/worker.rs:424:13
    |
424 |         let mut new_hashs: Vec<VersaHash> = vec![];
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `blk_hash`
  --> src/optchain/validator/mod.rs:69:13
   |
69 |         let blk_hash = block.hash();
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_blk_hash`

warning: unused variable: `num`
  --> src/optchain/mempool/mod.rs:41:33
   |
41 |     pub fn get_tx_blocks(&self, num: usize) -> Result<Vec<TransactionBlock>, Vec<TransactionBlock>> {
   |                                 ^^^ help: if this is intentional, prefix it with an underscore: `_num`

warning: unused variable: `num`
   --> src/optchain/multichain/mod.rs:161:38
    |
161 |     pub fn get_avai_tx_blocks(&self, num: usize) -> Result<Vec<TransactionBlock>, Vec<TransactionBlock>> {
    |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_num`

warning: unused variable: `hash`
   --> src/optchain/multichain/mod.rs:165:38
    |
165 |     pub fn get_block_by_shard(&self, hash: &H256, shard_id: usize) -> Option<VersaBlock> {
    |                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_hash`

warning: unused variable: `shard_id`
   --> src/optchain/multichain/mod.rs:165:51
    |
165 |     pub fn get_block_by_shard(&self, hash: &H256, shard_id: usize) -> Option<VersaBlock> {
    |                                                   ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `hash`
   --> src/optchain/multichain/mod.rs:169:34
    |
169 |     pub fn get_prop_block(&self, hash: &H256) -> Option<ProposerBlock> {
    |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_hash`

warning: unused variable: `hash`
   --> src/optchain/multichain/mod.rs:173:43
    |
173 |     pub fn get_avai_block_by_shard(&self, hash: &H256, shard_id: usize) -> Option<AvailabilityBlock> {
    |                                           ^^^^ help: if this is intentional, prefix it with an underscore: `_hash`

warning: unused variable: `shard_id`
   --> src/optchain/multichain/mod.rs:173:56
    |
173 |     pub fn get_avai_block_by_shard(&self, hash: &H256, shard_id: usize) -> Option<AvailabilityBlock> {
    |                                                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `tx_blk`
   --> src/optchain/multichain/mod.rs:177:39
    |
177 |     pub fn verify_availability(&self, tx_blk: &TransactionBlock) -> Result<bool, String> {
    |                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_tx_blk`

warning: variable does not need to be mutable
   --> src/optchain/symbolpool/mod.rs:121:13
    |
121 |         let mut hash2symbol: Database::<Symbol> = 
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `shard_id`
   --> src/optchain/mod.rs:273:9
    |
273 |     let shard_id = format!("{:x}", shard_id);
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_shard_id`

warning: unused variable: `api_port`
   --> src/optchain/mod.rs:276:9
    |
276 |     let api_port: u16 = api_addr.port();
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_api_port`

warning: unused variable: `i`
   --> src/optchain/mod.rs:284:15
    |
284 |         .map(|i| {
    |               ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: associated function `get_longest_chain_hash` is never used
   --> src/optchain/blockchain/mod.rs:163:8
    |
43  | impl Node {
    | --------- associated function in this implementation
...
163 |     fn get_longest_chain_hash(root: &Box<Node>) -> (H256, usize) {
    |        ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `delete_block` is never used
   --> src/optchain/blockchain/mod.rs:298:8
    |
260 | impl Blockchain {
    | --------------- method in this implementation
...
298 |     fn delete_block(&mut self, hash: &H256) {
    |        ^^^^^^^^^^^^

warning: field `validator` is never read
  --> src/optchain/miner/mod.rs:59:5
   |
52 | pub struct Context {
   |            ------- field in this struct
...
59 |     validator: Validator,
   |     ^^^^^^^^^

warning: constant `EXPER_NUMBER` is never used
 --> src/tests/bash_tests/create_exper_bash.rs:4:7
  |
4 | const EXPER_NUMBER: usize = 28;
  |       ^^^^^^^^^^^^

warning: constant `SHARD_NUM` is never used
 --> src/tests/bash_tests/create_exper_bash.rs:5:7
  |
5 | const SHARD_NUM: usize = 5;
  |       ^^^^^^^^^

warning: constant `SHARD_SIZE` is never used
 --> src/tests/bash_tests/create_exper_bash.rs:6:7
  |
6 | const SHARD_SIZE: usize = 5;
  |       ^^^^^^^^^^

warning: constant `PROPAGATION_DELAY` is never used
 --> src/tests/bash_tests/create_exper_bash.rs:7:7
  |
7 | const PROPAGATION_DELAY: usize = 100;//ms
  |       ^^^^^^^^^^^^^^^^^

warning: constant `INCLUSIVE_DIFF` is never used
 --> src/tests/bash_tests/create_exper_bash.rs:8:7
  |
8 | const INCLUSIVE_DIFF: usize = 15;
  |       ^^^^^^^^^^^^^^

warning: function `generate_exper_bash` is never used
  --> src/tests/bash_tests/create_exper_bash.rs:15:4
   |
15 | fn generate_exper_bash() -> Result<(), Error> {
   |    ^^^^^^^^^^^^^^^^^^^

warning: constant `EXPER_NUMBER` is never used
 --> src/tests/bash_tests/create_local_bash.rs:4:7
  |
4 | const EXPER_NUMBER: usize = 26;
  |       ^^^^^^^^^^^^

warning: constant `SHARD_NUM` is never used
 --> src/tests/bash_tests/create_local_bash.rs:5:7
  |
5 | const SHARD_NUM: usize = 5;
  |       ^^^^^^^^^

warning: constant `SHARD_SIZE` is never used
 --> src/tests/bash_tests/create_local_bash.rs:6:7
  |
6 | const SHARD_SIZE: usize = 5;
  |       ^^^^^^^^^^

warning: constant `PROPAGATION_DELAY` is never used
 --> src/tests/bash_tests/create_local_bash.rs:7:7
  |
7 | const PROPAGATION_DELAY: usize = 100;//ms
  |       ^^^^^^^^^^^^^^^^^

warning: constant `INCLUSIVE_DIFF` is never used
 --> src/tests/bash_tests/create_local_bash.rs:8:7
  |
8 | const INCLUSIVE_DIFF: usize = 10;
  |       ^^^^^^^^^^^^^^

warning: function `generate_local_bash` is never used
  --> src/tests/bash_tests/create_local_bash.rs:15:4
   |
15 | fn generate_local_bash() -> Result<(), Error> {
   |    ^^^^^^^^^^^^^^^^^^^

warning: constant `EXPER_NUMBER` is never used
 --> src/tests/bash_tests/setup_bash.rs:9:7
  |
9 | const EXPER_NUMBER: usize = 28;
  |       ^^^^^^^^^^^^

warning: constant `SHARD_NUM` is never used
  --> src/tests/bash_tests/setup_bash.rs:10:7
   |
10 | const SHARD_NUM: usize = 5;
   |       ^^^^^^^^^

warning: constant `SHARD_SIZE` is never used
  --> src/tests/bash_tests/setup_bash.rs:11:7
   |
11 | const SHARD_SIZE: usize = 5;
   |       ^^^^^^^^^^

warning: constant `PROPAGATION_DELAY` is never used
  --> src/tests/bash_tests/setup_bash.rs:12:7
   |
12 | const PROPAGATION_DELAY: usize = 100;//ms
   |       ^^^^^^^^^^^^^^^^^

warning: constant `INCLUSIVE_DIFF` is never used
  --> src/tests/bash_tests/setup_bash.rs:13:7
   |
13 | const INCLUSIVE_DIFF: usize = 15;
   |       ^^^^^^^^^^^^^^

warning: function `read_config` is never used
  --> src/tests/bash_tests/setup_bash.rs:59:4
   |
59 | fn read_config(exper_number: usize) -> ConfigData {
   |    ^^^^^^^^^^^

warning: function `generate_exper_bash` is never used
  --> src/tests/bash_tests/setup_bash.rs:66:4
   |
66 | fn generate_exper_bash(exper_number: usize, config: &ConfigData) -> Result<(), Error> {
   |    ^^^^^^^^^^^^^^^^^^^

warning: function `generate_start_bash` is never used
   --> src/tests/bash_tests/setup_bash.rs:163:4
    |
163 | fn generate_start_bash(exper_number: usize, config: &ConfigData) {
    |    ^^^^^^^^^^^^^^^^^^^

warning: function `generate_start_nodes_bash` is never used
   --> src/tests/bash_tests/setup_bash.rs:222:4
    |
222 | fn generate_start_nodes_bash(exper_number: usize, config: &ConfigData) {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `generate_end_bash` is never used
   --> src/tests/bash_tests/setup_bash.rs:260:4
    |
260 | fn generate_end_bash(exper_number: usize, config: &ConfigData) {
    |    ^^^^^^^^^^^^^^^^^

warning: call to `.clone()` on a reference in this situation does nothing
   --> src/bitcoin/transaction/generator.rs:132:26
    |
132 |                   .unwrap()
    |  __________________________^
133 | |                 .clone()
    | |________________________^
    |
    = note: the type `Ed25519KeyPair` does not implement `Clone`, so calling `clone` on `&Ed25519KeyPair` copies the reference, which does not do anything and can be removed
    = note: `#[warn(noop_method_call)]` on by default
help: remove this redundant call
    |
132 -                 .unwrap()
133 -                 .clone()
132 +                 .unwrap()
    |
help: if you meant to clone `Ed25519KeyPair`, implement `Clone` for it
   --> /home/cc913/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ring-0.16.20/src/ec/curve25519/ed25519/signing.rs:27:1
    |
27  + #[derive(Clone)]
28  | pub struct Ed25519KeyPair {
    |

warning: unused `Result` that must be used
    --> src/manifoldchain/blockchain/mod.rs:1304:13
     |
1304 |             write!(output, "block {:?} created at {}\n", versa_block.hash(), formatted_datetime);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
     = note: `#[warn(unused_must_use)]` on by default
     = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
    --> src/manifoldchain/blockchain/mod.rs:1344:25
     |
1344 |                         write!(output, "domestic tx {:?} packaged at {} confirmed at {}\n", tx_hash, package_time, confirmed_time);
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
     = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
    --> src/manifoldchain/blockchain/mod.rs:1347:25
     |
1347 |                         write!(output, "input tx {:?} packaged at {} confirmed at {} ", tx_hash, package_time, confirmed_time);
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
     = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
    --> src/manifoldchain/blockchain/mod.rs:1358:25
     |
1358 |                         write!(output, "\n");
     |                         ^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
     = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused `Result` that must be used
    --> src/manifoldchain/blockchain/mod.rs:1377:25
     |
1377 |                         write!(output, "accept tx {:?} packaged at {} confirmed at {} ", tx_hash, package_time, confirmed_time);
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: this `Result` may be an `Err` variant, which should be handled
     = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: method `PoW` should have a snake case name
   --> src/manifoldchain/miner/mod.rs:180:8
    |
180 |     fn PoW(&self, con_block: &mut ConsensusBlock, nonce: usize) -> H256 {
    |        ^^^ help: convert the identifier to snake case: `po_w`
    |
    = note: `#[warn(non_snake_case)]` on by default

warning: comparison is useless due to type limits
  --> src/manifoldchain/transaction/generator.rs:99:26
   |
99 |             if x <= 0 || j < 0 {
   |                          ^^^^^
   |
   = note: `#[warn(unused_comparisons)]` on by default

warning: unused `Result` that must be used
   --> src/optchain/blockchain/mod.rs:273:9
    |
273 |         hash2blk.insert(genesis_hash.clone(), genesis_block.clone());
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
273 |         let _ = hash2blk.insert(genesis_hash.clone(), genesis_block.clone());
    |         +++++++

warning: unused `Result` that must be used
   --> src/optchain/blockchain/mod.rs:348:9
    |
348 | /         self.hash2blk.insert(
349 | |             blk_hash.clone(),
350 | |             block.clone()
351 | |         );
    | |_________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
348 |         let _ = self.hash2blk.insert(
    |         +++++++

warning: method `PoW` should have a snake case name
   --> src/optchain/miner/mod.rs:133:8
    |
133 |     fn PoW(&self, block_hash: H256, nonce: usize) -> H256 {
    |        ^^^ help: convert the identifier to snake case: `po_w`

warning: unused `Result` that must be used
  --> src/optchain/miner/worker.rs:86:21
   |
86 | /                     self.symbolpool.lock()
87 | |                                    .unwrap()
88 | |                                    .request_symbols(&cmt_root, indexs.clone());
   | |______________________________________________________________________________^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
86 |                     let _ = self.symbolpool.lock()
   |                     +++++++

warning: unused `Result` that must be used
   --> src/optchain/network/worker.rs:638:17
    |
638 | /                 self.symbolpool.lock()
639 | |                                .unwrap()
640 | |                                .insert_symbol(symbol);
    | |_____________________________________________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
638 |                 let _ = self.symbolpool.lock()
    |                 +++++++

warning: unused `Result` that must be used
  --> src/optchain/mempool/mod.rs:52:13
   |
52 |             self.tx_blk_map.insert(hash.clone(), tx_blk.clone());
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
52 |             let _ = self.tx_blk_map.insert(hash.clone(), tx_blk.clone());
   |             +++++++

warning: unused `Result` that must be used
   --> src/optchain/symbolpool/mod.rs:207:25
    |
207 |                         self.hash2symbol.insert(symbol_hash, sym);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
207 |                         let _ = self.hash2symbol.insert(symbol_hash, sym);
    |                         +++++++

warning: `optchain` (bin "optchain") generated 130 warnings (run `cargo fix --bin "optchain"` to apply 3 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.05s
